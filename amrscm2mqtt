#!/usr/bin/env python3
'''
Runs rtlamr to watch for IDM broadcasts from power meter. If meter id
is in the list, usage is sent to 'readings/{meter id}/meter_reading'
topic on the MQTT broker specified in settings.
WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.
'''
import os
import subprocess
import signal
import sys
import time
import paho.mqtt.publish as publish
import settings

# uses signal to shutdown and hard kill opened processes and self
def shutdown(signum, frame):
    try:
        rtltcp.kill()
        rtltcp.send_signal(15)
        rtlamr.send_signal(15)
        time.sleep(3)
        rtltcp.send_signal(9)
        rtlamr.send_signal(9)
        time.sleep(3)
    except Exception as e:
        print('error shutting down subprocesses', e)

    sys.exit(0)

signal.signal(signal.SIGTERM, shutdown)
signal.signal(signal.SIGINT, shutdown)

# stores last interval id to avoid duplication, includes getter and setter
last_reading = {}

auth = None

if len(settings.MQTT_USER) and len(settings.MQTT_PASSWORD):
    auth = {'username':settings.MQTT_USER, 'password':settings.MQTT_PASSWORD}

DEBUG=os.environ.get('DEBUG', '').lower() in ['1', 'true', 't']

def debug_print(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)

def get_last_interval(meter_id):
    return last_reading.get(meter_id, (None))

def set_last_interval(meter_id, interval_ID):
    last_reading[meter_id] = (interval_ID)

# send data to MQTT broker defined in settings
def send_mqtt(topic, payload,):
    try:
        publish.single(topic, payload=payload, qos=1, hostname=settings.MQTT_HOST, port=settings.MQTT_PORT, auth=auth)
    except Exception as ex:
        print("MQTT Publish Failed: " + str(ex))

# start the rtl_tcp program
rtltcp = subprocess.Popen([settings.RTL_TCP + " > /dev/null 2>&1 &"], shell=True,
                          stdin=None, stdout=None, stderr=None, close_fds=True)
time.sleep(5)

# start the rtlamr program.
rtlamr_cmd = [settings.RTLAMR, '-msgtype=scm', '-format=csv']
rtlamr = subprocess.Popen(rtlamr_cmd, stdout=subprocess.PIPE, universal_newlines=True)

while True:
    try:
        # rtlamr's readline returns byte list, remove whitespace and convert to string
        amrline = rtlamr.stdout.readline().strip()
        # split string on commas
        flds = amrline.split(',')

        if len(flds) != 9:

            # proper SCM results have 9 fields
            continue

        # make sure the meter id is one we want
        meter_id = int(flds[3])
        if len(settings.WATCHED_METERS) != 0 and meter_id not in settings.WATCHED_METERS:
            print(f'Ignoring reading for meter {meter_id}')
            continue

        # get some required info: current meter reading, current interval id, most recent interval $
        read_cur = int(flds[7])

        #current_reading_in_kwh = (read_cur * settings.WH_MULTIPLIER) / 1000
        
        print(f'Publishing reading for meter. meter_id={meter_id}, consumption={read_cur}')
        send_mqtt(
            'readings/' + str(meter_id) + '/meter_reading',
            '%s' % (read_cur)
        )

    except Exception as e:
        debug_print('Exception squashed! {}: {}', e.__class__.__name__, e)
        time.sleep(2)
